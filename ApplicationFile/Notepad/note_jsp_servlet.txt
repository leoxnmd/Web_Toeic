//Common :dùng để gọi hằng số dùng chung cho web khi project nhiều người làm
// utils: chứa phương thức dùng đi dùng lại nhiều lần

//add module trong project
//add module web-toeic-logic vào
  <dependencies>
        <dependency>
            <groupId>com.leo</groupId>
            <artifactId>web-toeic-logic</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
    </dependencies>
	
	
///	------------------------------ hibernate --------------------------------------------//

					//---Session---//
					
	//--tạo SessionFactory--//
			//--xml--//
			
//tạo 1 filw hibernate.cfg.xml
//thêm đoạn lệnh dưới để khởi tạo session-factory
//session-factory hỗ trợ tạo ra đối tượng session
//mà session dùng để thực thi câu lệnh.

<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
             <!-- JDBC Database connection settings -->
        <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/web-toeic</property>
        <property name="connection.username">root</property>
        <property name="connection.password">123456</property>
        <!-- Select our SQL dialect -->
        <property name="dialect">org.hibernate.dialect.MySQL5Dialect</property>
        <!-- Echo the SQL to stdout -->
        <property name="show_sql">true</property>
		
		// thêm vào thẻ <mapping> mapping với class object
		<mapping class="com.leo.webCore.peristence.entity.UserEntity"/>//tương ứng 1 class object
    </session-factory>
</hibernate-configuration>

			//--java code--//
//tạo 1 file java code (khuyến cáo tạo package common để chứa)
//nên thêm static

//khởi tạo biến hằng số tĩnh
 private static final SessionFactory SESSION_FACTORY = buildSessionFactory();
 
 //tạo 1 sesionFactory từ hibernate.cfg.xml
 private static SessionFactory buildSessionFactory() {
        
		//nên sử dụng try catch đề phòng sesionFactory khởi tạo bị lỗi
      public static SessionFactory getSessionFactory() {
		if (sessionFactory == null) {
			try {
				// Create registry
				registry = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();
				// Create MetadataSources
				MetadataSources sources = new MetadataSources(registry);
				// Create Metadata
				Metadata metadata = sources.getMetadataBuilder().build();
				// Create SessionFactory
				sessionFactory = metadata.getSessionFactoryBuilder().build();
			} catch (Exception e) {
				e.printStackTrace();
				if (registry != null) {
					StandardServiceRegistryBuilder.destroy(registry);
				}
			}
		}
		return sessionFactory;
	}
		
    }
//hàm lấy SessionFactory
	 public static SessionFactory getSessionFactory() {
        return SESSION_FACTORY;
    }
	

	//---lấy Session---//
  // phải khởi tạo lại session ở mỗi hàm truy vấn nếu không sẽ bị lỗi
  //nếu không nó sẽ không khởi tạo lại session nữa (không trả về đúng session cần thực thi)
  
        Session session= HibernateUtil.getSessionFactory().openSession();

		//--mapping--//
		
// để mapping java vs sql thông qua hibernate ta cần khai báo như sau:
	//ở mỗi file object- đối tượng thêm vào trước class
  @Entity//class này là một entity(đối tượng, thực thể)
  @Table(name = " ")//object class này tương ứng với bảng trong sql

//ở mỗi biến đối tượng cần khai báo:
//nếu là id tự tăng:
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private int id;
  
//nếu id không tự tăng:
  @Id
  @Column(name = "id")
  private int id;
  
//nếu column bình thường khai báo giống tên column trong sql
   @Column(name = "name")
   private String name;
 
// thêm vào fiel hibernate.cfg.xml để mapping với class object
<mapping class="com.leo.webCore.peristence.entity.UserEntity"/>//tương ứng 1 class object

// nếu sử dụng module thì ở module chứa hibernate.cfg.xml thêm vào pom.xml
  <dependency>
            <groupId>com.leo</groupId>
            <artifactId>web-toeic-core-peristence-data</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
		
	//--quan hệ giữa các bảng--//
	
  //--quan hệ 1...n --//
// vd: bảng quyền(1) và bảng userEntity(n)
// 1 gọi list
// n gọi class
  
//ở class obj quan hệ 1 

 @OneToMany(mappedBy = "roleEntity",fetch = FetchType.LAZY)//roleEntity ở name tương ứng với tên biến gọi class bên class quan hệ n
     private List<User> usersList;

 //LAZY: khi query(truy vấn) không lấy list dữ liệu đồng thời(vẫn có thể lấy list khi cần)
 // EAGER:lấy đồng thời list nên ảnh hưởng hiệu năng
 
 //ở class obj quan hệ n

 @ManyToOne
    @JoinColumn(name = "roleid")//tên column(cột) khoá chính bảng quan hệ 1
    private Role roleEntity;//gọi class quan hệ 1 và gọi thêm seter getter

  //--quan hệ n...n--//
//là quan hệ 1...n và n...1 thông qua 1 bảng trung gian
//vd: bảng userEntity 1..n comment n...1 baiviet

//ở bảng userEntity quan hệ 1 với n comment

  @OneToMany(mappedBy = "userid",fetch = FetchType.LAZY)
    private List<Comment> listComment;
	
//ở bảng comment trung gian với 2 bảng userEntity và baiviet

 //quan hệ comment 1...n baiviet
    @ManyToOne
    @JoinColumn(name = "baivietid")
    private BaiViet baiViet;

    //quan hệ userEntity 1..n comment
    @ManyToOne
    @JoinColumn(name = "userid")
    private User userEntity;

//ở bảng baiviet n...1 comment
 @OneToMany(mappedBy = "baiViet", fetch = FetchType.LAZY)
    private List<Comment> listComment;
	


//=====================Thêm Sửa Xoá Xem Tìm SQL hibernate==================//


	//---Xem = findAll = show---//

  public List<T> findAll() {//T là tên entity(object)
        List<T> list = new ArrayList<>();
		
		  // phải khởi tạo lại session ở mỗi hàm truy vấn nếu không sẽ bị lỗi
        Session session=HibernateUtil.getSessionFactory().openSession();//mở session
        Transaction transaction = session.beginTransaction();//mở đối tượng transaction

        try {
            //HQL:
            StringBuilder sql = new StringBuilder("from ");//dùng StringBuffer để nối chuỗi sẽ tốt hơn nối chuỗi +
            sql.append(this.getPersistenceClassName());//nên trỏ this : đứng tại class, chứa class
            list = this.getSession().createQuery(sql.toString(),persistenceClass).getResultList();
            //chuyển tên class không phai tên bảng sql
            transaction.commit();
        } catch (HibernateError e) {
            transaction.rollback();//rollback dùng để thực thi lại
            throw e;
       }finally {
            session.close();//nên đóng 
        }
        return list;
    }

	//---Sửa = Update---//

 public T update(T entity) {
        T result=null;
        Session session=HibernateUtil.getSessionFactory().openSession();//mở session
        Transaction transaction = session.beginTransaction();//mở đối tượng transaction
        try{
          Object object=session.merge(entity);//merge là update trong hibernate //chuyển đối tượng entity
            result = (T) object;
            transaction.commit();
        }catch (HibernateException e){
            transaction.rollback();
            throw e;
         }finally {
        session.close();
    }
        return result;
    }
	//---Thêm = add = save---//
	
	public void save(T entity) {
        Session session=HibernateUtil.getSessionFactory().openSession();//mở session
        Transaction transaction = session.beginTransaction();//mở đối tượng transaction
        try{
            session.persist(entity);//persist là thêm 
            transaction.commit();
        }catch (HibernateException e){
            transaction.rollback();
            throw e;
        }finally {
        session.close();
    }
	}
	//---tìm theo id = findById ---//
	
	 public T findById(ID id) {
        T reuslt=null;
        Session session=HibernateUtil.getSessionFactory().openSession();//mở session
        Transaction transaction = session.beginTransaction();//mở đối tượng transaction
        try {
            reuslt = session.get(persistenceClass,id);//get truyền vào class và Serializable (để sử dụng phải extends vd: ID extends Serializable )
            if(reuslt==null){
                throw new ObjectNotFoundException("Not Found "+id, null);// ném lỗi khi không tìm thấy id
            }
        }catch (HibernateException e){
            transaction.rollback();
            throw e;
        }finally {
            session.close();
        }
        return reuslt;
    }
	
		//---tìm theo điều kiện và sắp xếp theo điều kiện (dùng trong bảng ) = findByProperty ---//
		
	// perporty : tên cột 
	// value: điều kiện tìm
	// sortExpession: tên cột cần sắp xếp tăng giảm
	//sortExpession : asc (h) desc sắp xếp tăng giảm
	
	 public Object[] findByProperty(String property, Object value, String sortExpession, String sortDerection) {
        List<T> list = new ArrayList<>();
        Object totalItem=0;
        Session session = HibernateUtil.getSessionFactory().openSession();//mở session
        Transaction transaction = session.beginTransaction();//mở đối tượng transaction
        try {
            StringBuilder sqlList = new StringBuilder("from ");
            sqlList.append(this.getPersistenceClassName());
            if (property != null && value != null) {
                sqlList.append(" where ").append(property).append("=:value ");
            }
            if (sortExpession != null && sortDerection != null) {
                sqlList.append(" order by ").append(sortExpession);
                sqlList.append(" ").append(sortDerection.equals(CoreConstant.SORT_ASC) ? "asc" : "desc");
            }
            Query queryList =session.createQuery(sqlList.toString());
            if (value != null) {
                queryList.setParameter("value",value);
            }
            list=queryList.getResultList();

            StringBuilder sqlSize=new StringBuilder("select count(*) from ");
            sqlSize.append(this.getPersistenceClassName());
            if (property != null && value != null) {
                sqlSize.append(" where ").append(property).append("=:value");
            }
            Query query= session.createQuery(sqlSize.toString());
            if (value != null) {
                queryList.setParameter("value",value);
            }
           totalItem= query.list().get(0);//trả về object
            transaction.commit();
        } catch (HibernateException e) {
            transaction.rollback();
            throw e;
        } finally {
            session.close();
        }
        return new Object[]{totalItem,list};
    }


	//---xoá list id = delete  ---//

